**************************************************************************************************
numeros.txt
Se tiene que crear una carpeta llamada "Archivos" y guardarse dentro ya que este es uno de los archivos donde se buscara la palabra.

uno dos dos tres tres tres cuatro cuatro cuatro cuatro cinco cinco cinco cinco cinco
**************************************************************************************************
numeros2.txt
Se tiene que crear una carpeta llamada "Archivos" y guardarse dentro ya que este es uno de los archivos donde se buscara la palabra y se pueden crear mas arichos para buscar en ellos siempre que esten dentro de la carpeta.

uno dos dos tres tres tres cuatro cuatro cuatro cuatro cinco cinco cinco cinco cinco seis sies sies sies sies sies 
**************************************************************************************************
/*
PaqueteDatagrama.h
Es donde se encuentran declarados los metodos y variables para obtener informacion del paquete y se encuentran en la carpeta llamda SocketD
*/
#ifndef PAQUETEDATAGRAMA_H_
#define PAQUETEDATAGRAMA_H_
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>
#include <netdb.h>

class PaqueteDatagrama{

	private :
		char *datos;
		char ip[16];
		unsigned longitud;
		int puerto;

	public :
 	PaqueteDatagrama(void *, unsigned , const char *, int);
	PaqueteDatagrama(unsigned );
	char *obtieneDireccion();
	unsigned obtieneLongitud();
	int obtienePuerto();
	char *obtieneDatos();
	void inicializaPuerto(int);
	void inicializaIP(char *);
	void inicializaDatos(char *);
};

#endif
**************************************************************************************************
/*
PaqueteDatagrama.cpp
Es donde se encuentran los metodos para obtener informacion del paquete y se encuentran en la carpeta llamda SocketD
*/
#include "PaqueteDatagrama.h"

PaqueteDatagrama::PaqueteDatagrama(void *data, unsigned largo, const char * dirip, int pto) {
	datos = new char[largo];
    memcpy(datos,data,largo);
	strcpy(ip,dirip);
	longitud = largo;
	puerto = pto;
}

PaqueteDatagrama::PaqueteDatagrama(unsigned largo){
	datos = new char[largo];
	longitud = largo;
}

char *  PaqueteDatagrama::obtieneDireccion() {return ip;}

unsigned PaqueteDatagrama::obtieneLongitud() {return longitud;}

int PaqueteDatagrama::obtienePuerto() {return puerto;}

char * PaqueteDatagrama::obtieneDatos() {return datos;}

void PaqueteDatagrama::inicializaPuerto(int pto) {
	puerto = pto;
}

void PaqueteDatagrama::inicializaIP(char *dirip) {
    strcpy(ip,dirip);
}

void PaqueteDatagrama::inicializaDatos(char *data) {
    memcpy(datos,data,longitud);
}
**************************************************************************************************
/*
SocketDatagrama.h
Es donde se encuentran los metodos y variables del socket y se encuentran en la carpeta llamda SocketD
*/
#ifndef SOCKETDATAGRAMA_H_
#define SOCKETDATAGRAMA_H_

#include "PaqueteDatagrama.h"
#include <sys/types.h>
#include <errno.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <signal.h>
#include <unistd.h>
#include <sys/time.h>
#include <vector>
#include <string>
#include <list>
#include <arpa/inet.h>
#include <iostream>
#include <stdio.h>
#include <strings.h>
using namespace std;

class SocketDatagrama{
	public:
		struct sockaddr_in direccionLocal;
		struct sockaddr_in direccionForanea;
		int s;
		struct timeval tiempo, t1, t, tr;;
		bool timeout;
	
	public:
		SocketDatagrama();
		SocketDatagrama(int);
		~SocketDatagrama();
		int recibe(PaqueteDatagrama & p);
		int envia(PaqueteDatagrama & p);
		void unsetTimeout();
   		void setTimeout(time_t segundos, suseconds_t microsegundos);
   		int recibeTimeout(PaqueteDatagrama &p); 
};

#endif
**************************************************************************************************
/*
SocketDatagrama.cpp
Es donde se encuentran los metodos del socket y se encuentran en la carpeta llamda SocketD
*/
#include "SocketDatagrama.h" 
#include "PaqueteDatagrama.h"
#include <iostream>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/time.h>
#include <math.h>

using namespace std;

SocketDatagrama::SocketDatagrama(int pto) {
	s = socket(AF_INET, SOCK_DGRAM,0);
	bzero((char *)&direccionLocal,sizeof(direccionLocal));
	direccionLocal.sin_family = AF_INET;
	direccionLocal.sin_addr.s_addr=INADDR_ANY;
	direccionLocal.sin_port = htons(pto);
	bind(s,(struct sockaddr *)&direccionLocal,
	sizeof(direccionLocal));
}

SocketDatagrama::SocketDatagrama() {
	s = socket(AF_INET, SOCK_DGRAM,0);
	bzero((char *)&direccionLocal,sizeof(direccionLocal));
	direccionLocal.sin_family = AF_INET;
	direccionLocal.sin_addr.s_addr=INADDR_ANY;
	direccionLocal.sin_port = htons(0);
	bind(s,(struct sockaddr *)&direccionLocal,
	sizeof(direccionLocal));
}

SocketDatagrama::~SocketDatagrama(){
	close(s);
}

int SocketDatagrama::recibe(PaqueteDatagrama &p) {
	socklen_t lon = sizeof(direccionForanea);
	unsigned char x[ 4 ]; 
	char ip[16];
   	int aux = recvfrom(s, (char *)p.obtieneDatos(), p.obtieneLongitud(), 0, (struct sockaddr *)&direccionForanea, &lon);
	memcpy( x, (char *)&direccionForanea.sin_addr.s_addr, 4 );
	sprintf( ip, "%d%c%d%c%d%c%d", (int)x[ 0 ], '.', (int)x[ 1 ], '.', (int)x[ 2 ], '.', (int)x[ 3 ] );
	p.inicializaIP(inet_ntoa(direccionForanea.sin_addr));
	p.inicializaPuerto(htons(direccionForanea.sin_port));
return aux;
}


int SocketDatagrama::envia(PaqueteDatagrama &p) {
	bzero((char *)&direccionForanea, sizeof(direccionForanea));
   	direccionForanea.sin_family = AF_INET;
   	direccionForanea.sin_port = htons(p.obtienePuerto());
   	direccionForanea.sin_addr.s_addr = inet_addr(p.obtieneDireccion());
	int aux = sendto(s,(char *)p.obtieneDatos(), p.obtieneLongitud(), 0,
	(struct sockaddr *)&direccionForanea,sizeof(direccionForanea));
return aux;
}

void SocketDatagrama::unsetTimeout(){
	timeout = false;
	setsockopt(s, SOL_SOCKET, SO_RCVTIMEO, 0, 0);
}

void SocketDatagrama::setTimeout(time_t segundos, suseconds_t microsegundos){
	tiempo.tv_sec = segundos;
	tiempo.tv_usec = microsegundos;
	setsockopt(s, SOL_SOCKET, SO_RCVTIMEO, (char *)&tiempo, sizeof(tiempo));
	timeout = true;
}

int SocketDatagrama::recibeTimeout(PaqueteDatagrama &p){
	struct timeval t1, t2, tr;

	int retorno;
	socklen_t clilen;
	clilen = sizeof(direccionForanea);
	gettimeofday(&t1, NULL);
	retorno = recvfrom(s, (char *)p.obtieneDatos(), p.obtieneLongitud(), 0, (struct sockaddr *)&direccionForanea, &clilen);
	gettimeofday(&t2, NULL);
	if(retorno < 0){
		std :: cout << "Tiempo Excedido" << std :: endl;
		if(errno == EWOULDBLOCK)
			retorno = retorno;
		else
			std :: cout << "Error en recvfrom" << std :: endl;
	}
	if(retorno > 0){
		unsetTimeout();
		timersub(&t2, &t1, &tr);
		std :: cout << "Tiempo de recepcion" << std :: endl;
		std :: cout << "Segundos: " << tr.tv_sec << std :: endl;
		std :: cout << "Microsegundos: " << tr.tv_usec << std :: endl;

	}
	p.inicializaPuerto(ntohs(direccionForanea.sin_port));
	inet_ntop(AF_INET, &(direccionForanea.sin_addr), p.obtieneDireccion(), INET_ADDRSTRLEN);
	return retorno;
}
**************************************************************************************************
/*
Serializacion.h
Se describen las estruturas para poder enviar y recibir paquetes ya sea del cliente a servidor o servidor a cliente
*/

/* Definiciones necesarias para los clientes y el servidor de archivos */
#define MAX_PATH 255
//Longitud máxima en el nombre de un archivo
#define BUF_SIZE 1000 //Cantidad de bytes que se transfieren por paquete
/* Definición de las operaciones permitidas */
#define CREATE 1 //Crea un nuevo archivo
#define READ   2 //Lee una parte del archivo
#define WRITE  3 //Escribe una parte del archivo
#define DELETE 4 //Elimina un archivo existente
/*Códigos de error */
#define OK				0 //Operación correcta
#define E_BAD_OPCODE	-1 //Operación desconocida
#define E_BAD_PARAM		-2 //Error en un parámetro
#define E_IO			-3 //Error en disco u otro error de E/S

/* Formato del mensaje que viaja del cliente hacia el servidor*/
struct messageCS{
	uint32_t opcode; //Código de la operación solicitada por el cliente
	uint32_t count; //Numero de bytes útiles (leídos o por escribir), devuelto por el servidor en READ y enviado por el cliente en WRITE
	uint32_t offset;//Lugar del archivo donde se debe iniciar la lectura o escritura, enviado por el cliente 
	char name[MAX_PATH]; //Palabra a buscar
};

/* Formato del mensaje que viaja del servidor hacia el cliente */
struct messageSC{
	uint32_t count; //Numero de bytes útiles, devuelto por el servidor en READ y enviado por el cliente en WRITE
	uint32_t result; //Código de error devuelto por el servidor
    uint32_t offset;
	char data[BUF_SIZE]; //Respuesta
};
**************************************************************************************************
/*
Servidor.cpp
Es la clase principal del servidor donde se reciben y crean los parqueten que se recibiran y se enviaran
se ejecuta: ./Servidor
*/
#include "SocketD/SocketDatagrama.h"
#include "Serializacion.h"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <dirent.h>
#include <fstream>
#include <sstream> 
#include <iostream>
#define PATH "./Archivos/"
using namespace std;

void error(const char *s){
  perror (s);
  exit(EXIT_FAILURE);
}

string Busca_en_Archivo(char *archivo, char * palabra){
  	FILE *fich;
  	unsigned ftam;
  	char * aux = (char *) malloc(1 + strlen(archivo)+ strlen(PATH));
  	string datos;
  	string respuesta = string(archivo);
  	unsigned offset = 0;
  	stringstream stream;

  	respuesta += " ";
    strcpy(aux, PATH);
    strcat(aux, archivo);
  	ifstream file;
  	file.open(aux , ios::in);
  	if (!file){
   		cout << "No se pudo abrir: " << archivo << endl; 
    }else{
      	
     	while (! file.eof() ) {
            getline (file,datos, ' ');
            if (datos == palabra){
            	offset++;
            	cout << "1: " << datos << "  2: " << palabra << " valor: " << offset << endl;
            	stream << offset; 
            	respuesta += stream.str() + ", ";
            	stream.str(std::string());
            	offset += datos.size(); 
            }else{
            	offset += datos.size() + 1;
            }
        }
     	file.close();
    }
    return respuesta;
}

int main(int args, char *argv[]) {
	int PUERTO = 9000;
	SocketDatagrama socket(PUERTO);
	char *respuesta = NULL;
 	DIR *dir;
  	struct dirent *ent;
  	struct messageCS *solicitud;
  	string aux = "";
	
	while (true) {
		cout << "\n\nEsperando Clientes...\n" << endl;
		PaqueteDatagrama info = PaqueteDatagrama(sizeof(struct messageCS));
		socket.recibe(info);
		/*Se recibe peticion*/
		solicitud = (struct messageCS *) info.obtieneDatos();
		char *ip = info.obtieneDireccion();
    int port  = info.obtienePuerto();
		cout << "Se recibio peticion de: " << ip << endl;
		
		int opcode = 0;
		int count = 0;
		int offset= 0;

		opcode = solicitud->opcode;
		count = solicitud->count;
		offset= solicitud->offset;
		char palabra[count];
    strcpy(palabra, solicitud->name); 
		cout << "Opcode: " 	<< opcode  << endl;
		cout << "Count: " 	<< count   << endl;
		cout << "Offset: " 	<< offset  << endl;
		cout << "Name: " 	<< palabra << endl;
		switch(opcode){

            case READ:
            	/* Empezaremos a leer en el directorio */
  				dir = opendir (PATH);
				/* Miramos que no haya error */
  				if (dir == NULL) 
    				error("No puedo abrir el directorio");
  				/* Leyendo uno a uno todos los archivos que hay */
  				while ((ent = readdir (dir)) != NULL) {
      				if ( (strcmp(ent->d_name, ".")!=0) && (strcmp(ent->d_name, "..")!=0) ){
      					/* Una vez tenemos el archivo, lo pasamos a una función para procesarlo. */
      					aux += Busca_en_Archivo(ent->d_name, palabra);
    				}
    			}
  				closedir (dir);
  				/*Se envia respuesta*/
  				struct messageSC msj;
  				msj.count = aux.size();
				msj.result  = OK;
				msj.offset = 0;
				strcpy(msj.data, aux.c_str());
        		PaqueteDatagrama res = PaqueteDatagrama((char *)&msj, sizeof(msj), ip, port);
        		socket.envia(res);
        		cout << "\n\n\nSe envio: " << endl;
				cout << "Count: " 	<< msj.count  << endl;
				cout << "Result: " 	<< msj.result << endl;
				cout << "Offset: " 	<< msj.offset << endl;
				cout << "Data: " 	<< msj.data   << endl;
        		aux = "";
        		respuesta = NULL;                     
            break;

		}
	}//while true
return 0;
}
**************************************************************************************************
