**************************************************************************************************
/*
MessageCS.java
Se crea la clase para poder formar estructuras o paquetes que seran enviados del cliente al servidor en lenguaje java
*/
import java.nio.ByteBuffer;
import java.nio.ByteOrder;


public class MessageCS {

    private  int opcode;    
    private  int count;
    private  int offset;
    private  String name;
    
    public MessageCS(int opcoud, int caunt, int ofset, String neim){
        opcode = opcoud;
        count = caunt;
        offset = ofset;
        name = neim;
    }
    
    public static MessageCS getClassFromBytes(byte[] buf) {
        ByteBuffer bb = ByteBuffer.wrap(buf);
        bb.order(ByteOrder.LITTLE_ENDIAN);
        int opcoud = bb.getInt();
        int caunt = bb.getInt();
        int ofset = bb.getInt();
        StringBuilder sb = new StringBuilder();
        byte nameByte;
        while ( (nameByte = bb.get()) != '\0' )
            sb.append((char) nameByte);
        
        MessageCS mensaje = new MessageCS(opcoud, caunt, ofset, sb.toString());

        return mensaje;
    }
    
    public byte[] getByteRepr() {
        ByteBuffer bb = ByteBuffer.allocate(3 * 4 + 255);
        bb.order(ByteOrder.LITTLE_ENDIAN);
        bb.putInt(opcode);
        bb.putInt(count);
        bb.putInt(offset);
        for (int i = 0; i < count; i++)
          bb.put((byte) name.charAt(i));
        return bb.array();
    }
    
    public int getOpcode() { 
        return opcode; 
    }

    public int getCount() { 
        return count; 
    }
    
    public int getOffset() { 
        return offset; 
    }

    public String getName() { 
        return name; 
    }
    
    public void setOpcode(int opcoud) { 
        opcode = opcoud;
    }

    public void setCount(int caunt) { 
        count = caunt; 
    }    

    public void setOffset(int ofset) {
        offset = ofset; 
    }

    public void setName(String neim) { 
        name = neim;
    }

}
**************************************************************************************************
/*
MessageSC.java
Se crea la clase para poder formar estructuras o paquetes que seran enviados del servido al cliente en lenguaje java
*/
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class MessageSC {
    
    private int count;   
    private int result;    
    private byte[] data; 
    private  int offset;   
    private final int BUF_SIZE = 1000;

    public MessageSC(int count, int result, int offset, byte[] data){
        this.count = count;
        this.result =  result;
        this.data = data;   
        this.offset = offset;     
    }

    public static MessageSC getClassFromBytes(byte[] buf) {
        ByteBuffer bb = ByteBuffer.wrap(buf);
        bb.order(ByteOrder.LITTLE_ENDIAN);
        int count = bb.getInt();
        int result = bb.getInt();
        int offset = bb.getInt();
        StringBuilder sb = new StringBuilder();
        byte nameByte;
        while ( (nameByte = bb.get()) != '\0' )
            sb.append((char) nameByte);
        
        MessageSC mensaje = new MessageSC(count, result, offset, String.valueOf(sb).getBytes());

        return mensaje;
    }
    
    public byte[] getByteRepr() {
        ByteBuffer bb = ByteBuffer.allocate(4 * 4 + BUF_SIZE);
        bb.order(ByteOrder.LITTLE_ENDIAN);
        bb.putInt(this.count);
        bb.putInt(this.result); 
        bb.putInt(this.offset);                               
        for (int i = 0; i < BUF_SIZE; i++)
          bb.put(this.data[i]);
        return bb.array();
    }
    
    public int getCount() { 
        return count;
    }

    public int getResult() { 
        return result; 
    }

    public byte[] getData() { 
        return data; 
    }

    public int getOffset() { 
        return offset; 
    }

    public void setCount(int caunt) { 
        count = caunt;
    }

    public void setResult(int res) { 
        result = res;
    }

    public void setData(byte[] dat) { 
        data = dat;
    }

    public void setOffset(int ofset) { 
        offset = ofset;
    }

}
**************************************************************************************************
/*
Cliente_Palabra.java
Clase principal del cliente, se ejecuta:
java Cliente_Palabra direccion puerto palabra_a_buscar
ejemplo:
java Cliente_Palabra "127.0.0.1" 9000 tres
*/
import java.net.*;
import java.io.*;

public class Cliente_Palabra{
    static final int CREATE = 1; 
    static final int READ = 2;   
    static final int WRITE = 3;  
    static final int DELETE = 4; 

    static final int PUERTO = 7000;
    static final int TAM_PAQUETE = 1000;

    static final int OK = 0; 

	public static void main(String[] args) {
		try{
        	InetAddress host = InetAddress.getByName(args[0]);
        	int pto = Integer.parseInt(args[1]);
        	String palabra = args[2];
        	DatagramSocket c = new DatagramSocket();
            /*Se crea peticion*/
            MessageCS peticion = new MessageCS(READ, palabra.length(), 0, palabra);
            byte[] datos = peticion.getByteRepr();
        	DatagramPacket p = new DatagramPacket(datos, datos.length, host, pto);
        	c.send(p);
        	System.out.println("Se envio a: " + host);
            System.out.println("Opcode: " + peticion.getOpcode());
            System.out.println("Count: " + peticion.getCount());
            System.out.println("Offset: " + peticion.getOffset());
        	System.out.println("Name: " + peticion.getName());
            Thread.sleep(1 * 5);

            /*Se recibe respuesta*/
        	DatagramPacket res = new DatagramPacket(new byte[TAM_PAQUETE], TAM_PAQUETE);
        	c.receive(res);
        	MessageSC respuesta = MessageSC.getClassFromBytes(res.getData());
            int count  = respuesta.getCount();
            int result = respuesta.getResult();
            byte[] r   = respuesta.getData();
            int offset = respuesta.getOffset();
            String veces = new String(r);
            System.out.println("\n\n\nSe recibe:");
            System.out.println("Count: "  + count);
            System.out.println("Result: " + result);
            System.out.println("Offset: " + offset);
            System.out.println("Data: "   + veces);
      	}catch(Exception e){
      		e.printStackTrace();
    	}
	}
}
**************************************************************************************************
#Makefile
#Archivo make para compilar en lenguaje java
all:
	javac MessageCS.java
	javac MessageSC.java
	javac Cliente_Palabra.java
**************************************************************************************************